#!/usr/bin/env ruby

require "fileutils"
require "pry"

PROJECT_ROOT_PATH = File.absolute_path(File.join(__dir__, "."))
BUILD_PATH = File.join(PROJECT_ROOT_PATH, "tmp/builds")
COMPARISONS_REPO_ROOT_PATH = File.join(PROJECT_ROOT_PATH, "tmp/rails-template-variants-comparison")
ALL_BUILDS = Dir.children(BUILD_PATH)

VANILLA_BUILD_NAME = ALL_BUILDS.find { |build_name| build_name.start_with?("vanilla_") }
VANILLA_BUILD_PATH = File.join(BUILD_PATH, VANILLA_BUILD_NAME)
COMPARISON_BUILDS = ALL_BUILDS - [VANILLA_BUILD_NAME]

def copy_build(build_name:, branch_name:, build_path:)
  system("git checkout -b #{branch_name}")

  # the `.` at the end of the cp command is what copies the contents of the dir
  # including "hidden" `.` files (the same trick works with shell `cp` command)
  # FileUtils.cp_r("#{build_path}/.", COMPARISONS_REPO_ROOT_PATH)
  system("rsync -av --exclude='.git' --exclude='node_modules' --exclude='tmp' #{build_path}/ #{COMPARISONS_REPO_ROOT_PATH}/")

  system("git add .")
  system("git commit -n -m 'Add #{build_name}'")
end

def main
  FileUtils.rm_rf(COMPARISONS_REPO_ROOT_PATH)
  FileUtils.mkdir_p(COMPARISONS_REPO_ROOT_PATH)

  Dir.chdir(COMPARISONS_REPO_ROOT_PATH) do
    system("git init")
    system("git remote add origin git@github.com:ackama/rails-template-variants-comparison.git")

    copy_build(
      build_name: VANILLA_BUILD_NAME,
      branch_name: "main",
      build_path: VANILLA_BUILD_PATH
    )

    COMPARISON_BUILDS.each do |build_name|
      build_path = File.join(BUILD_PATH, build_name)
      keepers = [".git", "."]
      deletable_files = Dir.glob("{*,.*}").reject { |f| keepers.include?(f) }

      # clean out all the files from the previous build (except .git)
      FileUtils.rm_rf(deletable_files)

      copy_build(
        build_name:,
        branch_name: build_name,
        build_path:
      )

      # go back to main before we start the next build
      system("git checkout main")
    end
  end
end

main
