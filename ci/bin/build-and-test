#!/usr/bin/env ruby

require "fileutils"
require "pathname"
require "yaml"

require_relative "lint-configs"

def ensure_everything_is_committed
  out = `git status -s`

  raise StandardError, "there are uncommitted changes or un-staged files: #{out}" unless out.empty?
end

def build_rails_version_specifier(target_versions_path)
  major_minor = YAML.safe_load_file(target_versions_path).fetch("target_rails_major_minor")

  "~> #{major_minor}.0"
end

root_path = File.absolute_path(File.join(__dir__, "../.."))
template_path = File.join(root_path, "template.rb")
builds_path = File.join(root_path, "tmp/builds")
app_name = ENV.fetch("APP_NAME", "app")
app_path = File.join(builds_path, app_name)
target_versions_path = File.join(root_path, "target_versions.yml")
rails_version_specifier = build_rails_version_specifier(target_versions_path)

config_path = if ENV.fetch("CONFIG_PATH", "") == ""
                File.join(root_path, "ackama_rails_template.config.yml")
              else
                File.join(root_path, ENV.fetch("CONFIG_PATH"))
              end

config_env_var = %Q(CONFIG_PATH="#{config_path}") if config_path
skip_flags = ENV.fetch("SKIPS", "--skip-javascript --skip-docker --skip-kamal --skip-solid")

puts "=" * 80
puts <<~EO_CONFIG_SUMMARY
  Config summary:

    template_path = #{template_path}
    builds_path = #{builds_path}
    app_name = #{app_name}
    app_path = #{app_path}
    template_path = #{template_path}
    config_path = #{config_path || "None"}
EO_CONFIG_SUMMARY
puts "=" * 80

raise "Missing config YML file" if config_path && !(File.exist?(config_path) && File.file?(config_path))

puts "Installing latest compatible rails gem"
install_output = `gem install rails --version '#{rails_version_specifier}' --no-document`

puts install_output # for ease of debugging

rails_version = install_output
                .split("\n")
                .grep(/Successfully installed rails-\d/)
                .first
                .strip
                .sub("Successfully installed rails-", "")

puts "Using rails version #{rails_version}"

unless Dir.exist?(builds_path)
  puts "Creating #{builds_path}"
  FileUtils.mkdir_p(builds_path)
end

if Dir.exist?(app_path)
  puts "Removing old build from #{app_path}"
  FileUtils.rm_rf(app_path)
end

Dir.chdir(builds_path) do |cwd|
  puts "Working dir is now #{cwd}"
  cmd = %Q(#{config_env_var} TARGET_VERSIONS_PATH="#{target_versions_path}" RACK_ENV=development RAILS_ENV=development rails _#{rails_version}_ new "#{app_name}" -d postgresql #{skip_flags} -m "#{template_path}") # rubocop:disable Layout/LineLength
  puts <<~EO_HELP
    Build command:
    #{cmd}
  EO_HELP

  system(cmd, exception: true)
end

puts "Running post-generator checks"
Dir.chdir(app_path) do |cwd|
  puts "Working dir is now #{cwd}"

  puts "Checking everything is committed and there are no un-staged files"
  ensure_everything_is_committed

  puts "Checking that no config properties have been duplicated in environment files"
  ensure_no_duplicate_config_lines_in_environment_files

  puts "Running test suite"
  system("./bin/ci-run", exception: true)
end
